@page "/registrerad/{email}"
@using KlaraKarl.Entities;
@inject Data.KlarakarldbContext service

<div class="container mycontainer">
    <h1>Anmälan mottagen för @osa.Name </h1>
<p>Här är dina uppgifter</p>
    <div class="mb-3">
        <i class="fa-solid fa-pencil" data-bs-toggle="modal" data-bs-target="#exampleModal" onclick="@ShowModal"> Redigera uppgifter</i>


    </div>
<div class="container">
    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Namn</th>
                    <th>E-post</th>
                </tr>
            </thead>
            <tbody>
                    @if (osa != null)
                    {

                        <tr>
                            <td>@osa.Name</td>
                            <td>@osa.Email</td>

                        </tr>
                        @if (osa.Allergies2.Count > 1)
                        {
                            <tr><td colspan="6"><strong>Specialkost</strong></td></tr>
                            @foreach (var item in osa.Allergies2)
                            {
                                <tr><td colspan="6">@item.Allergy1</td></tr>

                            }
                        }
                    }




                    else
                    {
                        <tr><td colspan="6"><strong>Hittade ingen person</strong></td></tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <Modal @ref="modalRef">
        <ModalContent Centered>
            <ModalHeader>
                <ModalTitle>Redigera uppgifter</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>Name</FieldLabel>
                    <TextEdit @bind-text="@osa.Name" />
                </Field>
                <Field>
                    <FieldLabel>Surname</FieldLabel>
                    <TextEdit @bind-text="@osa.Email" />
                </Field>
                @foreach (TempAllergies allerg in tempallergylist)
                {


                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is2" >@allerg.allergyname</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is10" Margin="Margin.IsAuto">
                            <Check TValue="bool" Checked="@allerg.checkedallergy" @oninput="e => UpdateAllergies(e, allerg)" />
                        </FieldBody>
                    </Field>
                }
                <Field>
                    <FieldLabel>Annan specialkost</FieldLabel>
                    <TextEdit Placeholder="Fyll i kompletterande specialkost..." />

                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Stäng</Button>
                <Button Color="Color.Primary" Clicked="@SaveChangesOnEdit">Spara ändringar</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
    <p>Du kommer få ett mail med kompletterande uppgifter inom kort håll utkik i din mailinkorg. </p>
</div>
@code {
    [Parameter]

    public string? email { get; set; }
    private Person person { get; set; }
    Osaformmodel osa = new Osaformmodel();
    List<TempAllergies> tempallergylist = new List<TempAllergies>();
    List<PossibleAllergy> allergylist = new List<PossibleAllergy>();

    private void UpdateAllergies(ChangeEventArgs e, TempAllergies allergy)
    {
        //    if ((bool)e.Value)
        //    {
        //        osa.Allergies2.Add(allergy);
        //    }
        //    else
        //    {
        //        osa.Allergies2.Remove(allergy);
        //    }
        foreach (Allergy allerg in osa.Allergies2)
        {
            var match = allergylist

    .FirstOrDefault(Allergy => Allergy.Allergy != null && Allergy.Allergy.Contains(allergy.allergyname));
            if (match == null)
            {
                //TempAllergies tempalerg = new TempAllergies();
                //tempalerg.allergyname = allerg.Allergy1;
                //tempalerg.checkedallergy = true;
                //tempallergylist.Add(tempalerg);
                Console.WriteLine("test");
                Allergy newallerg = new Allergy();
                newallerg.Allergy1 = allergy.allergyname;
                osa.Allergies2.Add(newallerg); 
            }

        }


    }
    void OnAllergyChanged(bool value)
    {
        Console.WriteLine(value);
        if (value)
        {

        }
    }
    protected override void OnInitialized()
    {
        person = service.People.OrderByDescending(a => a.CreatedAt).Where(a => a.Email == email).FirstOrDefault();
        osa.Email = person.Email;
        osa.Name = person.Name;
        var rwsp = service.Rwsps.Where(a => a.Id == person.RwspId).FirstOrDefault();
        osa.Allergies2 = rwsp.Allergies.ToList();
        allergylist = service.PossibleAllergies
            .OrderByDescending(x => x.Allergy == "Vegetariskt")
            .ThenBy(x => x.Allergy)
            .ToList();
        foreach (PossibleAllergy possallerg in allergylist)
        {
            TempAllergies tempalerg = new TempAllergies();
            tempalerg.allergyname = possallerg.Allergy;
            var match = osa.Allergies2
           
    .FirstOrDefault(Allergy => Allergy.Allergy1 != null && Allergy.Allergy1.Contains(tempalerg.allergyname));
            if (match != null)
            {
                tempalerg.checkedallergy = true;
            }
            else
            {
                tempalerg.checkedallergy = false;

            }
            tempallergylist.Add(tempalerg);
         


        }
    //    foreach(Allergy allerg in osa.Allergies2)
    //    {
    //        var match = allergylist

    //.FirstOrDefault(Allergy => Allergy.Allergy != null && Allergy.Allergy.Contains(allerg.Allergy1));
    //        if (match == null)
    //        {
    //            TempAllergies tempalerg = new TempAllergies();
    //            tempalerg.allergyname = allerg.Allergy1;
    //            tempalerg.checkedallergy = true; 
    //            tempallergylist.Add(tempalerg);


    //        }
            
    //    }
    }


    public void sendmail()
    {
            //EmailClient emailClient = new EmailClient(connectionString);
    }
    private Modal modalRef;

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }
    private void SaveChangesOnEdit()
    {
        person.Name = osa.Name;
        person.Email = osa.Email;
        service.SaveChanges();
        modalRef.Hide();
    }


 }
