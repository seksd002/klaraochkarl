@page "/registrerad/{email}"
@implements IDisposable
@inject NavigationManager NavigationManager
@using KlaraKarl.Entities;
@using KlaraKarl.Services;
@inject Data.KlarakarldbContext service
@inject IJSRuntime JSRuntime


<PageTitle>Bekräftelse</PageTitle>
<div class="container mycontainer mr-0 pr-0 mr-md-3 pr-md-3">

    <h1>Tack för din anmälan @person.Name</h1>
      <p>Du kommer få ett mail med kompletterande uppgifter skickat till @person.Email inom kort håll utkik i din mailinkorg. (OBS kan hamna i skräpposten)</p>
    <p>Fel mail? Skicka in en ny anmälan bara &#128522</p>

</div>
@*<KlaraKarl.Pagecomponents.HeartComponent></KlaraKarl.Pagecomponents.HeartComponent>
*@
@code {
    [Parameter]

    public string? email { get; set; }
    private Person person { get; set; }
    public string customtempallergy { get; set; }
    List<PossibleAllergy> posallergylist = new List<PossibleAllergy>();


    //Osaformmodel osa = new Osaformmodel();

    private void UpdateAllergies(ChangeEventArgs e, string allergy)
    {

        if (person.Rwsp.Allergies != null)
        {
            if ((bool)e.Value)
            {
                Allergy allerg2 = new()
                    {
                        Allergy1 = allergy
                    };
                person.Rwsp.Allergies.Add(allerg2);
            }
            else
            {
                var allerg = person.Rwsp.Allergies.Where(a => a != null && a.Allergy1 != null && a.Allergy1 == allergy).FirstOrDefault();
                person.Rwsp.Allergies.Remove(allerg);
            }
        }

    }
    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    await JSRuntime.InvokeVoidAsync("hearts");
    //}
    protected override void OnInitialized()
    {
        person = service.People.OrderByDescending(a => a.CreatedAt).Where(a => a.Email == email).FirstOrDefault();
        posallergylist = service.PossibleAllergies.ToList();
        //NavigationManager.LocationChanged += LocationChanged;
        //base.OnInitialized();
        foreach(Allergy allerg in person.Rwsp.Allergies)
        {
            if(allerg != null)
            {
                //var match = posallergylist.Any(x => x.Allergy?.Contains(allerg.Allergy1));
                var match = posallergylist.Any(x => x.Allergy?.Contains(allerg.Allergy1) == true);

                if (!match)
                {
                    PossibleAllergy al = new PossibleAllergy
                        {
                            Allergy = allerg.Allergy1
                        };
                    posallergylist.Add(al);


                }
            }





        }
        sendmail();


    }


    public void sendmail()
    {
        MailService mailservice = new MailService();
        mailservice.sendmail(person.Email, person.Name, "Bröllop", $"<h2>Tack för din anmälan!<h2><p>Det glädjer oss att du vill fira tillsammans med oss den 19 augusti.</p><p>Varmt välkommen! Kram från Klara och Karl</p><p>OBS detta mail går ej att svara på </p>");
        mailservice.sendmail("klara.skold@gmail.com", "Klara Sköld", "Ny   anmälan", $"<p>{person.Name} med {person.Email} har precis anmält sig.</p>");
    }



    private void ValidFormSubmitted(EditContext editContext)
    {

        
        if (customtempallergy != null)
        {
            Allergy tempallerg = new Allergy();
            tempallerg.Allergy1 = customtempallergy;
            person.Rwsp.Allergies.Add(tempallerg);

        }
        service.SaveChanges();
        toggleform();
    } 

    void InvalidFormSubmitted(EditContext editContext)
    {
        //LastSubmitResult = "OnInvalidSubmit was executed";
    }
    private bool FormIsHidden = true;
    private bool InfoIsHidden = false;
    private void toggleform()
    {

        if (this.FormIsHidden == true )
        {
            FormIsHidden = false;
        }
        else
        {
            FormIsHidden = true;
        }
        if (this.InfoIsHidden == true)
        {
            InfoIsHidden = false;
        }
        else
        {
            InfoIsHidden = true;
        }
    }
    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        //sendmail();
        string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
        System.Diagnostics.Debug.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");
    }

    void IDisposable.Dispose()
    {
        // Unsubscribe from the event when our component is disposed
        NavigationManager.LocationChanged -= LocationChanged;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("showBackground");
        }
    }
}
