@page "/registrerad/{email}"
@implements IDisposable
@inject NavigationManager NavigationManager
@using KlaraKarl.Entities;
@using KlaraKarl.Services;
@inject Data.KlarakarldbContext service
@inject IJSRuntime JSRuntime


<PageTitle>Bekräftelse</PageTitle>

<div class="container mycontainer">
    <h1>Tack för din anmälan @person.Name</h1>
      <p>Du kommer få ett mail med kompletterande uppgifter skickat till @person.Email inom kort håll utkik i din mailinkorg. (OBS kan hamna i skräpposten)</p>
    <p>Fel mail? Skicka in en ny anmälan bara &#128522</p>



@*<p>Här är dina uppgifter</p>
    <div class="mb-3">
        <i class="fa-solid fa-pencil" data-bs-toggle="modal" data-bs-target="#exampleModal" onclick="@toggleform" > Redigera uppgifter</i>


    </div>*@
@*<div class="container">
    <div class="row bg-light" hidden="@InfoIsHidden">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Namn</th>
                    <th>E-post</th>
                </tr>
            </thead>
            <tbody>
                    @if (person != null)
                    {

                        <tr>
                            <td>@person.Name</td>
                            <td>@person.Email</td>

                        </tr>
                        @if (person.Rwsp.Allergies.Count > 1)
                        {
                            <tr><td colspan="6"><strong>Specialkost</strong></td></tr>
                            @foreach (var item in person.Rwsp.Allergies)
                            {
                                <tr><td colspan="6">@item.Allergy1</td></tr>

                            }
                        }
                    }

                    else
                    {
                        <tr><td colspan="6"><strong>Hittade ingen person</strong></td></tr>
                    }
                </tbody>
            </table>
        </div>
        <EditForm Model=@person OnValidSubmit=@ValidFormSubmitted OnInvalidSubmit=@InvalidFormSubmitted class="well form-horizontal" hidden="@FormIsHidden">


            <!-- Form Name -->
            <legend>Ändra uppgifter!</legend>
            <DataAnnotationsValidator />
            <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
            <!-- Text input-->
            <div class="form-group">
                <label for="Name">För och efternamn</label>
                <InputText @bind-Value=person.Name class="form-control" id="SurName" placeholder="För och efternamn" />
                <ValidationMessage For="@(() => person.Name)" />
            </div>
            <div class="form-group">
                <label for="Name">E-post</label>
                <input type="email" @bind="@person.Email" class="form-control" id="Email" placeholder="Ange din e-post" />
                <ValidationMessage For="@(() => person.Email)" />

            </div>
            <div class="form-group">
                @if (person.Rwsp.Allergies.Count > 1)
                {
                    <label>Specialkost (markera vid behov):</label>
                    @foreach (var item in posallergylist)
                    {
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" name="Allergies" value="@item.Allergy" checked="@person.Rwsp.Allergies.Any(x => x.Allergy1?.Contains(item.Allergy) == true)" @oninput="e => UpdateAllergies(e, item.Allergy)" />

                            <label class="form-check-label" for="check1">@item.Allergy</label>
                        </div>
                    }
                    <ValidationMessage For="@(() => person.Rwsp.Allergies)" />
                }



                <div class="form-group">
                    <label for="Allergy">Komplettera med eventuell annan specialkost</label>
                    <InputText @bind-Value=@customtempallergy class="form-control" id="Allergy" />
                </div>
            </div>

            <div class="form-group">
                <label class="col-md-4 control-label"></label>
                <div class="col-md-4">
                    <button type="submit" class="btn btn-primary">Spara <span class="glyphicon glyphicon-send"></span></button>
                </div>
            </div>

        </EditForm>
    </div>*@

    
   
</div>
@code {
    [Parameter]

    public string? email { get; set; }
    private Person person { get; set; }
    public string customtempallergy { get; set; }
    List<PossibleAllergy> posallergylist = new List<PossibleAllergy>();


    //Osaformmodel osa = new Osaformmodel();

    private void UpdateAllergies(ChangeEventArgs e, string allergy)
    {

        if (person.Rwsp.Allergies != null)
        {
            if ((bool)e.Value)
            {
                Allergy allerg2 = new()
                    {
                        Allergy1 = allergy
                    };
                person.Rwsp.Allergies.Add(allerg2);
            }
            else
            {
                var allerg = person.Rwsp.Allergies.Where(a => a != null && a.Allergy1 != null && a.Allergy1 == allergy).FirstOrDefault();
                person.Rwsp.Allergies.Remove(allerg);
            }
        }

    }
    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    await JSRuntime.InvokeVoidAsync("hearts");
    //}
    protected override void OnInitialized()
    {
        person = service.People.OrderByDescending(a => a.CreatedAt).Where(a => a.Email == email).FirstOrDefault();
        posallergylist = service.PossibleAllergies.ToList();
        //NavigationManager.LocationChanged += LocationChanged;
        //base.OnInitialized();
            foreach(Allergy allerg in person.Rwsp.Allergies)
        {
            if(allerg != null)
            {
                //var match = posallergylist.Any(x => x.Allergy?.Contains(allerg.Allergy1));
                var match = posallergylist.Any(x => x.Allergy?.Contains(allerg.Allergy1) == true);

                if (!match)
                {
                    PossibleAllergy al = new PossibleAllergy
                        {
                            Allergy = allerg.Allergy1
                        };
                    posallergylist.Add(al);


                }
            }
        
        



        }
        sendmail();


    }


    public void sendmail()
    {
        MailService mailservice = new MailService();
        mailservice.sendmail(person.Email, person.Name, "Bröllop", $"<h2>Tack för din anmälan!<h2> <br> <p>Det glädjer oss att du vill fira tillsammans med oss den 19 augusti.</p><br> <p>Varmt välkommen! Kram från Klara och Karl</p><b><p>OBS detta mail går ej att svara på </p>");
    }



    private void ValidFormSubmitted(EditContext editContext)
    {

        
        if (customtempallergy != null)
        {
            Allergy tempallerg = new Allergy();
            tempallerg.Allergy1 = customtempallergy;
            person.Rwsp.Allergies.Add(tempallerg);

        }
        service.SaveChanges();
        toggleform();
    } 

    void InvalidFormSubmitted(EditContext editContext)
    {
        //LastSubmitResult = "OnInvalidSubmit was executed";
    }
    private bool FormIsHidden = true;
    private bool InfoIsHidden = false;
    private void toggleform()
    {

        if (this.FormIsHidden == true )
        {
            FormIsHidden = false;
        }
        else
        {
            FormIsHidden = true;
        }
        if (this.InfoIsHidden == true)
        {
            InfoIsHidden = false;
        }
        else
        {
            InfoIsHidden = true;
        }
    }
    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        //sendmail();
        string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
        System.Diagnostics.Debug.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");
    }

    void IDisposable.Dispose()
    {
        // Unsubscribe from the event when our component is disposed
        NavigationManager.LocationChanged -= LocationChanged;
    }
}
