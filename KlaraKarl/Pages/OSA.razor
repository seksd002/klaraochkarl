@page "/osa"
@inject KlarakarlServices service
@inject NavigationManager NavigationManager; 
<PageTitle>OSA</PageTitle>

<div class="container mycontainer">

<EditForm Model=@NewPerson OnValidSubmit=@ValidFormSubmitted OnInvalidSubmit=@InvalidFormSubmitted class="well form-horizontal">


<!-- Form Name -->
<legend>Anmälan!</legend>
        <DataAnnotationsValidator />
        <ValidationSummary />
<!-- Text input-->
        <div class="form-group">
            <label for="Name">För och efternamn</label>
            <InputText @bind-Value=NewPerson.Name class="form-control" id="SurName" placeholder="För och efternamn" />
        </div>  
        <div class="form-group">
            <label for="Name">E-post</label>
            <input type="email" @bind="@NewPerson.Email" class="form-control" id="Email" placeholder="Ange din e-post" />
        </div>
        <br />
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onclick=toggle>
            <label class="form-check-label" for="flexSwitchCheckDefault">Specialkost</label>
        </div>
        <div hidden=@IsHidden>
            <p>Kryssa i eventuella allergier eller ange speciella önskemål</p>
        
            <div class="form-check">
                <input type="checkbox" class="form-check-input" id="check1" name="option1" value="something">
                <label class="form-check-label" for="check1">Mjölk</label>
            </div>
            <div class="form-check">
                <input type="checkbox" class="form-check-input" id="check2" name="option2" value="something">
                <label class="form-check-label" for="check2">Laktos</label>
            </div>
            <div class="form-check">
                <input type="checkbox" class="form-check-input">
                <label class="form-check-label">Skaldjur</label>
            </div>
            <div class="form-group">
                <label for="Allergy">Skriv in eventuell annan specialkost</label>
                <InputText @bind-Value=@NewPerson.customAllergy class="form-control" id="Allergy" />
            </div>
        </div>
        <div class="form-group">
            <label for="OtherInfo">Övrigt</label>
            <textarea type="text" @bind="@NewPerson.Otherinfo" class="form-control" id="OtherInfo" placeholder="Något övrigt du vill tillägga?" />
        </div>

<!-- Button -->
        <div class="form-group">
  <label class="col-md-4 control-label"></label>
  <div class="col-md-4">
  <button type="submit" class="btn btn-primary">Skicka <span class="glyphicon glyphicon-send"></span></button>
  </div>
</div>

    </EditForm>
</div>
    <!-- /.container -->

@code {
    private bool IsHidden = true;
    private void toggle()
    {

        if(this.IsHidden == true)
        {
            IsHidden = false;
        }
        else
        {
            IsHidden = true; 
        }
    }

    string? email; 
    //List<Person> Persons = new List<Person>();
    private async Task GetValidPersonsAsync(String email)
    {
        //Persons = await service.GetValidPersonsAsync(email);
        //Console.WriteLine(Persons); 
    }
    private async Task SetPersonForAccept(Person person)
    {
        //await service.SetPersonForAccept(person);
    }
    public Osaformmodel NewPerson { get; set; } = new Osaformmodel();
    string LastSubmitResult;



    async void ValidFormSubmitted(EditContext editContext)
    {
        //NewPerson.Registred = true; 
        //await service.AddPersonAsync(NewPerson);
        LastSubmitResult = "OnValidSubmit was executed";

        NavigationManager.NavigateTo("/registrerad/" + NewPerson.Email);
        Console.WriteLine(NewPerson); 
        var person = new Person
            {
                Name = NewPerson.Name,
                Email = NewPerson.Email,
            };
        //MailService minmailklient = new MailService(); 
        //minmailklient
    }

    void InvalidFormSubmitted(EditContext editContext)
    {
        LastSubmitResult = "OnInvalidSubmit was executed";
    }

    //protected override async Task OnInitializedAsync()
    //{
    //    await RefreshPersons();
    //}
    //private async Task RefreshPersons()
    //{
    //    Persons = await service.GetPersonAsync();
    //}
}

