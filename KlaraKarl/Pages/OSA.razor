@page "/osa"
@using KlaraKarl.Entities;
@inject Data.KlarakarldbContext service
@inject NavigationManager NavigationManager; 
<PageTitle>OSA</PageTitle>

<div class="container mycontainer">

<EditForm Model=@NewPerson OnValidSubmit=@ValidFormSubmitted OnInvalidSubmit=@InvalidFormSubmitted class="well form-horizontal">


<!-- Form Name -->
<legend>Anmälan!</legend>
        <DataAnnotationsValidator />
        <ValidationSummary />
<!-- Text input-->
        <div class="form-group">
            <label for="Name">För och efternamn</label>
            <InputText @bind-Value=NewPerson.Name class="form-control" id="SurName" placeholder="För och efternamn" />
            <ValidationMessage For="@(() => NewPerson.Name)" />
        </div>  
        <div class="form-group">
            <label for="Name">E-post</label>
            <input type="email" @bind="@NewPerson.Email" class="form-control" id="Email" placeholder="Ange din e-post" />
            <ValidationMessage For="@(() => NewPerson.Email)" />

        </div>
        <br />
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onclick=toggle>
            <label class="form-check-label" for="flexSwitchCheckDefault">Specialkost</label>
        </div>
        <div hidden=@IsHidden>
            <div class="form-group">
                <label>Specialkost (markera vid behov):</label>
                @foreach (var item in @allergylist)
                {
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" name="Allergies" value="@item.Allergy" checked="@NewPerson.Allergies.Contains(item.Allergy)" @oninput="e => UpdateAllergies(e, item.Allergy)" />
                        <label class="form-check-label" for="check1">@item.Allergy</label>
                    </div>
                }
                <ValidationMessage For="@(() => NewPerson.Allergies)" />
            </div>
          

            <div class="form-group">
                <label for="Allergy">Skriv in eventuell annan specialkost</label>
                <InputText @bind-Value=@NewPerson.customAllergy class="form-control" id="Allergy" />
            </div>
        </div>
      
        <div class="form-group">
  <label class="col-md-4 control-label"></label>
  <div class="col-md-4">
  <button type="submit" class="btn btn-primary">Skicka <span class="glyphicon glyphicon-send"></span></button>
  </div>
</div>

    </EditForm>
</div>

@code {
    List<PossibleAllergy> allergylist = new List<PossibleAllergy> ();

    protected override void OnInitialized()
    {
        allergylist = service.PossibleAllergies
            .OrderByDescending(x => x.Allergy == "Vegetariskt")
            .ThenBy(x => x.Allergy)
            .ToList();

    }
    private void UpdateAllergies(ChangeEventArgs e, string allergy)
    {
        if ((bool)e.Value)
        {
            NewPerson.Allergies.Add(allergy);
        }
        else
        {
            NewPerson.Allergies.Remove(allergy);
        }
    }
    private bool IsHidden = true;
    private void toggle()
    {

        if(this.IsHidden == true)
        {
            IsHidden = false;
        }
        else
        {
            IsHidden = true; 
        }
    }
    //List<string> allergylist = new List<string> { "Mjölk", "Laktos", "Ägg" };

    string? email; 
    //List<Person> Persons = new List<Person>();
    private async Task GetValidPersonsAsync(String email)
    {
        //Persons = await service.GetValidPersonsAsync(email);
        //Console.WriteLine(Persons); 
    }
    private async Task SetPersonForAccept(Person person)
    {
        //await service.SetPersonForAccept(person);
    }
    public Osaformmodel NewPerson { get; set; } = new Osaformmodel();
    string LastSubmitResult;



    private void ValidFormSubmitted(EditContext editContext)
    {
        LastSubmitResult = "OnValidSubmit was executed";

        NavigationManager.NavigateTo("/registrerad/" + NewPerson.Email);
        var person = new Person
            {
                Name = NewPerson.Name,
                Email = NewPerson.Email,
            };
        var rwsp = new Rwsp
            {
                Otherinfo = NewPerson.Otherinfo,
            };
        rwsp.People.Add(person);
        var allergy = new Allergy
        {
            Allergy1 = NewPerson.customAllergy
        };
        rwsp.Allergies.Add(allergy);
        service.Rwsps.Add(rwsp);
        foreach(String allerg in NewPerson.Allergies)
        {
            var allergg = new Allergy
                {
                    Allergy1 = allerg
                };
            rwsp.Allergies.Add(allergg);

        }
        service.SaveChanges();
  
    }

    void InvalidFormSubmitted(EditContext editContext)
    {
        LastSubmitResult = "OnInvalidSubmit was executed";
    }

    //protected override async Task OnInitializedAsync()
    //{
    //    await RefreshPersons();
    //}
    //private async Task RefreshPersons()
    //{
    //    Persons = await service.GetPersonAsync();
    //}
}

