@layout AdminLayout
@page "/admin"
@using KlaraKarl.Entities;
@using Microsoft.EntityFrameworkCore;
@inject Data.KlarakarldbContext service
@inject IJSRuntime js
<PageTitle>Admin</PageTitle>
<AuthorizeView>
    <Authorized>
        
        <div class="container mycontainer ">
           
            <header class="navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0 shadow">
            <a class="navbar-brand col-md-3 col-lg-2 me-0 px-3 fs-6">Admin</a>
            <button class="navbar-toggler position-absolute d-md-none collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#sidebarMenu" aria-controls="sidebarMenu" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
@*            <input class="form-control form-control-dark w-100 rounded-0 border-0" type="text" placeholder="Sök på namn" aria-label="Search">
                
*@            
<button @onclick="copymail">Kopiera maillista</button>
<div class="navbar-nav">
                <div class="nav-item text-nowrap">
                        <div class="navbar-brand col-md-3 col-lg-2 me-0 px-3 fs-6 text- capitalize">@loggedinuser.Name</div>
                        <div class="navbar-brand col-md-3 col-lg-2 me-0 px-3 fs-6">@loggedinuser.Role</div>

                        
                </div>
            </div>
        </header>
            <br />
            <div class="row bg-light">
                <table class="table table-bordered">
                    <thead class="thead-dark">
                        <tr>
                            <th onclick="@(() => sortcolumn("Name", namebool))">Namn <i class="fas fa-sort"></i></th>
                            <th onclick="@(() => sortcolumn("Email", emailbool))">Email <i class="fas fa-sort"></i> </th>
                            <th onclick="@(() => sortcolumn("CreatedAt", createdat))">Anmäld <i class="fas fa-sort"></i></th>
                            <th>Allergier</th>
                            <th>Radera</th>


                        </tr>
                    </thead>
                    <tbody>
                        @if (persons.Any())
                        {
                            @foreach (var person in persons)
                            {
                                <tr>
                                    <td>@person.Name</td>
                                    <td>@person.Email</td>
                                    <td>@person.CreatedAt.ToShortDateString()</td>
                                    @if (person.Rwsp != null)
                                    {

                                        <td>@string.Join(", ", person.Rwsp.Allergies.Select(a => a.Allergy1))</td>

                                    }
                                    <td><button class="btn btn-danger" @onclick="removeentity">Ta bort</button></td>

                                </tr>
                            }
                        }
                        else
                        {
                            <tr><td colspan="6"><strong>Hittade ingen person</strong></td></tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

       
    </Authorized>
    <NotAuthorized>
      <KlaraKarl.Pagecomponents.Login />
    </NotAuthorized>
</AuthorizeView>


   
    @*<div class="row m-5">
        <div class="col-5 bg-light m-2 justify-content-start">
            <div class="p-3 mb-3 bg-primary text-white text-center">Lägg till person</div>
            <EditForm Model="@NewPerson">
                <div class="form-group">
                    <label for="Name">Namn</label>
                    <input type="text" id="surname" class="form-control" @bind-value="@NewPerson.Name" />
                </div>
               
                <div class="form-group">
                    <label for="quantity">Email</label>
                    <input type="email" id="email" class="form-control" @bind="@NewPerson.Email" />
                </div>
                <div class="form-group">
                    <label for="Description">Registrerad</label>
                    <input type="checkbox" id="Description" class="form-control" @bind="@NewPerson.Rwsps" />
                </div>
                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="AddNewPerson"> Lägg till person</button>
                </div>
            </EditForm>
        </div>
        <div class="col-5 bg-light m-2 justify-content-end">
            <div class="p-3 mb-1 bg-primary text-white text-center"> Ange nya uppgifter</div>
            <EditForm Model="@UpdatePerson">
                <div class="form-group">
                    <label for="Name">Namn</label>
                    <input type="text" id="surname" class="form-control" @bind-value="@UpdatePerson.Name" />
                </div>
                
                <div class="form-group">
                    <label for="email">Email</label>
                    <input type="email" id="email" class="form-control" @bind="@UpdatePerson.Email" />
                </div>
                <div class="form-group">
                    <label for="Registred">Registrerad</label>
                    <input type="checkbox" id="Description" class="form-control" @bind="@UpdatePerson.Registred" />
                </div>
               <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="UpdatePersonData"> Uppdatera person</button>
                </div>
            </EditForm>
        </div>
    </div>*@

@code {
    [CascadingParameter]
    private Task <AuthenticationState> authenticationState { get; set; }
    private User loggedinuser = new User(); 
    List<Person> persons = new List<Person>();
    private Person person { get; set; }

    protected override async void OnInitialized()
    {
        var authState = await authenticationState;

        loggedinuser.Name = authState.User.Identity.Name;
        loggedinuser.Role = authState.User.Claims.Skip(1).FirstOrDefault()?.Value;
    
    updateview();
    }
    private void removeentity ()
    {

        service.Remove(this.persons.FirstOrDefault());
        service.SaveChanges();
        updateview();
    }
    private void editentity()
    {
        Console.WriteLine(this);
    }
    private void updateview()
    {
        //persons = service.People.ToList()
        //var peopleWithRwspAndAllergies = service.People
        persons = service.People
       .Include(p => p.Rwsp)
       .ThenInclude(r => r.Allergies)
       .ToList();
    }
    private bool namebool { get; set; } = true;
    private bool emailbool { get; set; } = true;
    private bool createdat { get; set; } = true;

    private void sortcolumn(string sortingvalue, bool ascorddesc)
    {
        //Console.WriteLine(this);
        //persons = service.People
        //.OrderBy(s => s.Name)
        //.ToList();
        @*var peopleWithRwspAndAllergies = service.People
        .Include(p => p.Rwsp)
        .ThenInclude(r => r.Allergies)
        .OrderBy(s => s.Name)
        .ToList();*@
        switch (sortingvalue, ascorddesc)
        {
            case ("Name" , true) :
                persons = service.People.OrderBy(s => s.Name).ToList();
                namebool = false; 
                break;
            case ("Name", false):
                persons = service.People.OrderByDescending(s => s.Name).ToList();
                namebool = true;
                break;
            case ("Email", true):
                persons = service.People.OrderBy(s => s.Email).ToList();
                emailbool = false;
                break;
            case ("Email", false):
                persons = service.People.OrderByDescending(s => s.Email).ToList();
                emailbool = true;
                break;
            case ("CreatedAt", true):  
                persons = service.People.OrderBy(s => s.CreatedAt).ToList();
                createdat = false;
                break;
            case ("CreatedAt", false):
                persons = service.People.OrderByDescending(s => s.CreatedAt).ToList();
                createdat = true;
                break;
            // Lägg till fler cases efter behov för att sortera efter andra kolumner
            default:
                persons = service.People.OrderBy(s => s.Name).ToList(); // Standard sortering
                break;
        }




    }
    private async Task copymail()
    {

        var emails = persons.Select(x => x.Email).ToList();
        var emaillist = string.Join(";", emails);
        await js.InvokeVoidAsync("clipboardCopy.copyText", emaillist);



        
    }

}
